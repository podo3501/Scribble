틈나는대로 noexcept, const, constexpr 키워드 쓰기

--void CMainLoop::UpdateRenderItems()에서 cube world값을 안 넣어주고 있다.
--instance 버퍼에 인덱스문제가 있다.
--cubemap 붙이기
--renderitem과 geometry구조가 맞지 않다.
--일단  renderItem을 NRenderItem으로 계층구조가 있는 스트럭쳐로 바꾼다
--그다음 gpu에 올릴 버퍼를 NRenderItem쪽으로 이동한다. 
--그리고 geometry와 renderitem을 삭제한다.
--데이터들 + instance정보 => renderItem 해서 renderer에 renderItem으로 랜더링 하게끔 한다.
--랜더링에 의존적이지 않게 interface 를 만들어서 연결한다.
--추후에 draw함수 테스트 할때 가짜 interface 클래스를 생성해서 연결하면 Draw함수도 테스트 가능하다.
--directx3d를 외부에서 안 보이게 하는중
--draw호출을 반대로 한다.
--Renderer를 코어로 옮긴다.
--SetUploadBuffer로 수정하고 frameResource를 renderer로 넣는다.
--ModelTypeList와 instance클래스를 합친다.
--instance 클래스에 texture 파일 목록을 넣는다.
--EXPECT_EQ(m_instance->LoadModel(model.get()), true); 여기서 데이터를 넣으면 나중에 FillRenderItems를 따로 부를 이유가 없다.
--material을 instance 클래스에 material 목록을 넣는다.
--texture 클래스를 renderer에 넣는다.
--winproc을 윈도우로 옮기고 관련 변수들 정리 한다.
--m_camFrustum을 카메라에 넣음
--window를 core에서 꺼낸다.
--utility를 core용과 다른 것으로 분리한다. 그래서 core에 바로 include 하는 것이 없도록 한다.
--컬링 부분을 카메라 클래스에 옮긴다.
--UpdateMainPassCB() 에서 빛 데이터를 setupdata클래스에 넣는다.
--버그 수정

업데이트 부분에 materialIndex, diffuseIndex를 조정해야 한다.

새로운 메쉬를 만들때 같은 텍스춰를 사용한다면 머터리얼 인덱스와 텍스춰 인덱스가 달라지게 된다.
현재의 문제는 새로운 메쉬를 만들때 쓰는 텍스춰가 같은 텍스춰이기 때문이고, 해야할 것은 가짜 데이터를 
만들어서 텍스춰 인덱스를 맞추는 것이다.

현재 3가지의 가짜 데이터가 합쳐지는 형식인데 이것을 하나의 스트럭쳐로 만들어서 로딩하는 방식으로 바꾼다.

판 띄운다.
기둥 세운다.
ssao 적용
shadow map 적용
캐릭터를 붙인다.




